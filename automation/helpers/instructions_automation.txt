https://blog.jetbrains.com/pycharm/2024/09/how-to-use-fastapi-for-machine-learning/

###############################################################
### 3.Django Start (Daily)
###############################################################

cd automation/

source env/Scripts/activate

python manage.py runserver


###########################################
### 1. Virtual Environment
###########################################
python -m venv env

source env/Scripts/activate

# no packages should be returned from a new venv
pip freeze

(deactivate)

############################
pip install -r helpers/requirements_manual.txt

python.exe -m pip install --upgrade pip

pip freeze > helpers/requirements.txt


###############################################################
### 2. Django Start
### https://docs.djangoproject.com/en/5.1/intro/tutorial01/
###############################################################

source env/Scripts/activate

cd automation/

# without the . at the end 2 folders weather are created
django-admin startproject awd_main .

python manage.py runserver

python manage.py migrate

#####################################
Admin section
#####################################

cd automation/
python manage.py runserver

### create tables in the db automatically
python manage.py migrate

### create db admin
python manage.py createsuperuser


#############################################################
App creation
#############################################################

python manage.py startapp dataentry

# add the new lookup app in the settings file: INSTALLED_APPS

create following subfolders to dataentry app:
 management
    commands

python manage.py startapp uploads

python manage.py makemigrations     -> read the models file and prepare a file with sql commands
python manage.py migrate            -> execute the sql commands

python manage.py runserver



#####################################
Home Page
#####################################
Different approach than Rathan: all urls handled in the respective app, 
base urls file only redirects to the app of interest

in urls.py add:
from django.urls import path, include

urlpatterns = [
    path("admin/", admin.site.urls),
    path("", include('lookup.urls')),
]

in app-urls: lookup/urls:
from . import views

urlpatterns = [
    path("", views.home, name="home"),
]

create a templates folder under the APP directory (lookup/templates)
in that directory create html templates: home.html

create a views.py file & add:
from django.shortcuts import render

def home(request):
    return render(request, 'home.html', {})


#############################################################
Base HTML files with extensions
Bootstrap elements to html templates
Navbar editing
#############################################################

Good intro to SSH keys for Github:
https://www.udemy.com/course/top-python-and-django-web-development-bundle/learn/lecture/17575106#overview
##########################################################################################################






##########################################################################################################################
#############################################################
Model creation
Create a model for the todo app
#############################################################

Modify the models file in the newly created app
create classes inheriting from 
django.db.models.Model (base class)


# Register the new models in the admin.py in the respective app folder (todo/admin.py)
# to be visible in the web admin panel
1) import the classes from the models:      from . models import Task
2) register the model:                      admin.site.register(Task)

### For the model changes to take effect 2 commands are needed:
python manage.py makemigrations     -> read the models file and prepare a file with sql commands
python manage.py migrate            -> execute the sql commands

python manage.py runserver


#############################################################
Adding logic to fetch the tasks
#############################################################
todo_main / views
from todo.models import Task
def home(request):
    tasks = Task.objects.filter(is_completed=False)
    return render(request, "home.html", context={"tasks123": tasks})


#############################################################
Add button functionality to add a new task to the database
#############################################################
1.create a new urlpatterns list within the app/urls (todo/urls)
from django.urls import path
from . import views

urlpatterns = [
    path("addTask/", views.addTask, name="addTask"),
]

2. create a view function in todo/views
from django.shortcuts import render

def addTask(request):
    return render(request, "addTask.html")


#############################################################
Changing task status from the home page buttons
#############################################################
create a TaskAdmin class in todo/admin
register the TaskAdmin class in todo/admin

create a new endpoint in todo_main/urls that redirects to todo/urls
create a todo/urls


#############################################################
Redis Server
https://redis.io/blog/get-redis-cli-without-installing-redis-server/
#############################################################
redis-server --port 6389

redis-cli (not working on vscode bash)
ping

*start on port different than 6379 (default after msi installation):
https://stackoverflow.com/questions/31769097/cant-bind-tcp-listener-6379-using-redis-on-windows
You must've used the .msi installer. It automagically registers a windows service which starts instantly after the installation (at least on my win 10 machine).
This service uses the default config and binds to port 6379. When you start redis-server from the command line, if you haven't specified a different port through a config file, it picks up the default config again and tries to bind to port 6379 which fails.
Your cli works because it connects to the redis service that's already listening on 6379. Your shutdown command stops the service and from there things work as expected. Mystery solved. Case closed.


#############################################################
Celery
#############################################################
https://www.udemy.com/course/automate-the-boring-stuff-with-python-django/learn/lecture/41747916#overview
windows:
cd automation/

source env/Scripts/activate

celery -A awd_main worker --loglevel=info --pool=solo